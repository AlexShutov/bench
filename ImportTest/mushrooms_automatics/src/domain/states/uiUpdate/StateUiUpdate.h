/* 
* ValidationState.h
*
* Created: 18.08.2019 22:28:16
* Author: Admin
*/


#ifndef __VALIDATIONSTATE_H__
#define __VALIDATIONSTATE_H__

#include "Arduino.h"
#include "../../State.h"

/************************************************************************/
/* Завершающее состояние набития мешка, на котором происходит обновление
/* счетчика мешков, а также возможности набития следующего мешка.
/* Для этого проверяются данные не положения шнека, а заполненности бункера
/* с семечкой. Если бункер заполнен недостаточно (уровень меньше наименьшего), 
/* то загорится красная лампочка и шнек будет неактивен до тех пор, пока в 
/* бункере не наберется достаточно семечки для набития следующего мешка. 
/* Это проверяется просто, т.к. шнек и бункер имеют по 2 датчика и в программе 
/* используется один тип данных для представления состояния - в состояние просто
/* передается считыватель данных с конвейера вместо считывателя шнека. 
/* За состояние конвейера отвечает отдельный автомат. 
/* P.S. Передумал делать так, как написано выше, за это будет отвечать отдельная
/* стадия - фильтр. Валидация всегда проходит успешно.
/************************************************************************/
class StateUiUpdate : public State
{
//variables
public:
protected:
private:

//functions
public:
	StateUiUpdate(DataReader* pReader);
	virtual ~StateUiUpdate();
	
	/************************************************************************/
	/* Считаем, раз мы находимся в состоянии валидации, то
	/* ошибки уже быть не может
	/************************************************************************/
	virtual bool isError();
		
	/************************************************************************/
	/* валидация всегда успешна
	/************************************************************************/
	virtual bool checkStateChangeCondition();
	
protected:
private:
	StateUiUpdate( const StateUiUpdate &c );
	StateUiUpdate& operator=( const StateUiUpdate &c );

	virtual bool runAlways();
}; //ValidationState

#endif //__VALIDATIONSTATE_H__
