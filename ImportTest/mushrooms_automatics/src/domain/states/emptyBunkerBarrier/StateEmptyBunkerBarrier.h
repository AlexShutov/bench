/* 
* EmptyBunkerBarrier.h
*
* Created: 19.08.2019 0:13:48
* Author: Admin
*/


#ifndef __EMPTYBUNKERBARRIER_H__
#define __EMPTYBUNKERBARRIER_H__

#include "../../State.h"

/************************************************************************/
/* ѕроисходит проверка возможности набити€ следующего мешка.
/* ƒл€ этого провер€ютс€ данные не положени€ шнека, а заполненности бункера
/* с семечкой. ≈сли бункер заполнен недостаточно (уровень меньше наименьшего),
/* то загоритс€ красна€ лампочка и шнек будет неактивен до тех пор, пока в
/* бункере не наберетс€ достаточно семечки дл€ набити€ следующего мешка.
/* Ёто провер€етс€ просто, т.к. шнек и бункер имеют по 2 датчика и в программе
/* используетс€ один тип данных дл€ представлени€ состо€ни€ - в состо€ние просто
/* передаетс€ считыватель данных с конвейера вместо считывател€ шнека.
/* «а состо€ние конвейера отвечает отдельный автомат.
/************************************************************************/
class StateEmptyBunkerBarrier : public State
{
//variables
public:
protected:
private:

//functions
public:
	StateEmptyBunkerBarrier(DataReader* pReader);
	virtual ~StateEmptyBunkerBarrier();
	
	/************************************************************************/
	/* Ќа стадии проверки заполненности бункера не может быть ошибки, 
	/* т.к. в случае пустого бункера нам нужно просто подождать
	/************************************************************************/
	virtual bool isError();
	
	/************************************************************************/
	/* ѕровер€ем заполненность бункера. ” бункера так же есть 2 датчика - 
	/* начальный и конечный, но только они расположены вертикально.
	/* „тобы бункер был минимально наполнен, должен сработать хот€ бы
	/* один датчик (верхний или нижний). —амо собой, в случае, когда сработал 
	/* верхний, нижний будет тоже работать. ѕроверка обоих может помочь в случае, 
	/* если сломаетс€ нижний датчик. “огда шнек будет включатьс€ при полностью
	/* заполненном бункере (не должно случаитьс€, но вр€д ли :) )
	/************************************************************************/
	virtual bool checkStateChangeCondition();
	
protected:
private:
	StateEmptyBunkerBarrier( const StateEmptyBunkerBarrier &c );
	StateEmptyBunkerBarrier& operator=( const StateEmptyBunkerBarrier &c );

	/************************************************************************/
	/* ƒл€ ожидани€ наполнени€ нужно провер€ть только текущее значени€, 
	/* не нужно знать, изменились ли значени€ или нет.
	/************************************************************************/
	virtual bool ignorePreviousValue();

}; //EmptyBunkerBarrier

#endif //__EMPTYBUNKERBARRIER_H__
